from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.types import DomainDict
from rasa_sdk.forms import FormValidationAction
from rasa_sdk.events import SlotSet, AllSlotsReset


class GetProfessorContact(Action):

    def name(self) -> Text:
        return "action_get_professor_contact"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        nome_professor = tracker.get_slot("professor_name")

        dispatcher.utter_message(
            text=f"{nome_professor}@riogrande.ifrs.edu.br")

        return[SlotSet("professor_name", None)]


class GetDocRegister(Action):

    def name(self) -> Text:
        return "action_get_doc_register"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        link_matricula = "https://sia.ifrs.edu.br/aplicacoes/frame/index.php"
        link_tutorial = "https://sia.ifrs.edu.br/aplicacoes/frame/index.php"

        dispatcher.utter_message(
            text=f"Para baixar o comprovante de matr√≠cula voc√™ precisa acessar o link {link_matricula}")
        dispatcher.utter_message(
            text=f"Caso precise de alguma ajuda, assista o tutorial no link {link_tutorial}")

        return []


class GetClasses(Action):

    def name(self) -> Text:
        return "action_get_classes"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # buttons declaration
        buttons_integrado = [
            {"title": "Automa√ß√£o Industrial",
                "payload": '/courses{"courses_name": "automa√ß√£o"}'},
            {"title": "Fabrica√ß√£o Mec√¢nica",
                "payload": '/courses{"courses_name": "fabrica√ß√£o"}'},
            {"title": "Inform√°tica para Internet",
                "payload": '/courses{"courses_name": "inform√°tica"}'},
            {"title": "Geoprocessamento",
                "payload": '/courses{"courses_name": "geoprocessamento"}'},
            {"title": "Eletrot√©cnica",
                "payload": '/courses{"courses_name": "eletrot√©cnica"}'},
            {"title": "Refrigera√ß√£o",
                "payload": '/courses{"courses_name": "refrigera√ß√£o"}'}
        ]
        buttons_subsequente = [
            {"title": "Automa√ß√£o Industrial",
                "payload": '/courses{"courses_name": "automa√ß√£o"}'},
            {"title": "Fabrica√ß√£o Mec√¢nica",
                "payload": '/courses{"courses_name": "fabrica√ß√£o"}'},
            {"title": "Geoprocessamento",
                "payload": '/courses{"courses_name": "geoprocessamento"}'},
            {"title": "Eletrot√©cnica",
                "payload": '/courses{"courses_name": "eletrot√©cnica"}'},
            {"title": "Refrigera√ß√£o",
                "payload": '/courses{"courses_name": "refrigera√ß√£o"}'},
            {"title": "Enfermagem", "payload": '/courses{"courses_name": "enfermagem"}'}
        ]
        buttons_superior = [
            {"title": "Engenharia Mec√¢nica",
                "payload": '/courses{"courses_name": "engenharia mec√¢nica"}'},
            {"title": "An√°lise e Desenvolvimendo de Software",
                "payload": '/courses{"courses_name": "tads"}'},
            {"title": "Constru√ß√£o de Edif√≠cios",
                "payload": '/courses{"courses_name": "tce"}'},
            {"title": "F. Pedag√≥gica",
                "payload": '/courses{"courses_name": "forma√ß√£o pedag√≥gica"}'},
            {"title": "F. Pedag√≥gica n√£o Licenciados",
                "payload": '/courses{"courses_name": "pedag√≥gica n√£o licenciados"}'}
        ]

        # variables declaration
        uri_base = ""
        modality = tracker.get_slot("courses_modality").lower()

        modalities = {
            "integrado": {
                "link":"cursos-tecnicos-integrados/",
                "button": buttons_integrado,
                },
            "subsequente":{ 
                "link": "cursos-tecnicos-subsequentes/",
                "button": buttons_subsequente,
            },
            "superior": {
                "link":"cursos-superiores/",
                "button": buttons_superior,
            },
        }
        uri_modality = modalities[modality]["link"]

        # Dispatcher the button selector according with the chosen modality
        dispatcher.utter_message(
            text="Para qual curso gostaria de obter os horarios?", 
            buttons=modalities[modality]["button"], 
            button_type="vertical")

        complete_uri = uri_base+uri_modality
        dispatcher.utter_message(text=f"Para visualizar seu hor√°rio de aula voc√™ precisa acessar o link {complete_uri}")

        return []

        #link_courses = "https://ifrs.edu.br/riogrande/ensino/retorno-do-calendario/horarios/"

        #dispatcher.utter_message(
            #text=f"Os hor√°rios de suas aulas e disciplinas voc√™ pode conferir aqui {link_courses}!")

        #return []


class ClearSlots(Action):

    def name(self) -> Text:
        return "action_goodbye_and_clear_slots"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        dispatcher.utter_message(response="utter_goodbye")
        return[AllSlotsReset()]


class GetCalendar(Action):

    def name(self) -> Text:
        return "action_get_calendar"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        link_calendar = "https://ifrs.edu.br/riogrande/wp-content/uploads/sites/16/2022/05/Calendario-Academico-Campus-Rio-Grande-2022-alterado-em-abril-2022.pdf"

        dispatcher.utter_message(
            text=f"Confira aqui o calend√°rio acad√™mico üëá", attachment=link_calendar)

        return []


class GetCourses(Action):
    def name(self) -> Text:
        return "action_get_courses"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        """
        A action √© chamada para validar a op√ß√£o da modalidade do curso escolhida pelo us√°rio, assim que validada ela dispacha paara o usu√°rio bot√µes de selec√£o do curso de acordo com a modalidade escolhida.
        Ao final da action, vai ser retornado tamb√©m o preenchimento do slot (courses_modality_link) para ser utilizada na action seguinte (action_get_info_course) das Stories.
        """

        # buttons declaration
        buttons_integrado = [
            {"title": "Automa√ß√£o Industrial",
                "payload": '/courses{"courses_name": "automa√ß√£o"}'},
            {"title": "Fabrica√ß√£o Mec√¢nica",
                "payload": '/courses{"courses_name": "fabrica√ß√£o"}'},
            {"title": "Inform√°tica para Internet",
                "payload": '/courses{"courses_name": "inform√°tica"}'},
            {"title": "Geoprocessamento",
                "payload": '/courses{"courses_name": "geoprocessamento"}'},
            {"title": "Eletrot√©cnica",
                "payload": '/courses{"courses_name": "eletrot√©cnica"}'},
            {"title": "Refrigera√ß√£o",
                "payload": '/courses{"courses_name": "refrigera√ß√£o"}'}
        ]
        buttons_subsequente = [
            {"title": "Automa√ß√£o Industrial",
                "payload": '/courses{"courses_name": "automa√ß√£o"}'},
            {"title": "Fabrica√ß√£o Mec√¢nica",
                "payload": '/courses{"courses_name": "fabrica√ß√£o"}'},
            {"title": "Geoprocessamento",
                "payload": '/courses{"courses_name": "geoprocessamento"}'},
            {"title": "Eletrot√©cnica",
                "payload": '/courses{"courses_name": "eletrot√©cnica"}'},
            {"title": "Refrigera√ß√£o",
                "payload": '/courses{"courses_name": "refrigera√ß√£o"}'},
            {"title": "Enfermagem", "payload": '/courses{"courses_name": "enfermagem"}'}
        ]
        buttons_superior = [
            {"title": "Engenharia Mec√¢nica",
                "payload": '/courses{"courses_name": "engenharia mec√¢nica"}'},
            {"title": "An√°lise e Desenvolvimendo de Software",
                "payload": '/courses{"courses_name": "tads"}'},
            {"title": "Constru√ß√£o de Edif√≠cios",
                "payload": '/courses{"courses_name": "tce"}'},
            {"title": "F. Pedag√≥gica",
                "payload": '/courses{"courses_name": "forma√ß√£o pedag√≥gica"}'},
            {"title": "F. Pedag√≥gica n√£o Licenciados",
                "payload": '/courses{"courses_name": "pedag√≥gica n√£o licenciados"}'}
        ]

        # variables declaration
        uri_base = "https://ifrs.edu.br/riogrande/cursos/"
        modality = tracker.get_slot("courses_modality").lower()

        modalities = {
            "integrado": {
                "link":"cursos-tecnicos-integrados/",
                "button": buttons_integrado,
                },
            "subsequente":{ 
                "link": "cursos-tecnicos-subsequentes/",
                "button": buttons_subsequente,
            },
            "superior": {
                "link":"cursos-superiores/",
                "button": buttons_superior,
            },
        }
        uri_modality = modalities[modality]["link"]

        # Dispatcher the button selector according with the chosen modality
        button = dispatcher.utter_message(
            text="Para qual curso gostaria de mais informa√ß√µes?", 
            button=modalities[modality]["button"], 
            button_type="vertical")

        complete_uri = uri_base+uri_modality

        return [SlotSet("courses_modality_link", complete_uri)]


class GetInfoCours(Action):

    def name(self) -> Text:
        return "action_get_info_course"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        """
        A action valida o curso selecionado pelo usu√°rio e busca o link de acordo com o bot√£o clicado pelo usu√°rio.
        Al√©m de validar o curso, a action recebe o valor do slot (courses_modality_link) para interpolar com o endpoint de acordo com o curso selecionado.
        Por fim, despacha para o usu√°rio a informa√ß√£o com o link correto.
        """

        courses = {
            "automa√ß√£o": "automacao-industrial/",
            "fabrica√ß√£o": "fabricacao-mecanica/",
            "inform√°tica": "informatica-para-internet/",
            "eletrot√©cnica": "eletrotecnica/",
            "geoprocessamento": "geoprocessamento/",
            "refrigera√ß√£o": "refrigeracao-e-climatizacao/",
            "enfermagem": "enfermagem/",
            "engenharia mec√¢nica": "engenharia-mecanica/",
            "tads": "tads/",
            "tce": "curso-superior-de-tecnologia-em-construcao-de-edificios/",
            "forma√ß√£o pedag√≥gica": "curso-de-formacao-pedagogica/",
            "pedag√≥gica n√£o licenciados": "curso-de-formacao-pedagogica-para-graduados-nao-licenciados/"
        }

        course_name = tracker.get_slot("courses_name")
        course_modality = tracker.get_slot("courses_modality")
        link = tracker.get_slot("courses_modality_link")

        link += courses[course_name]

        msg=f"Segue o link de acesso para o curso {link}"

        dispatcher.utter_message(text=msg)

        return []


class ImformToDoRegister(Action):
    def name(self) -> Text:
        return "action_inform_do_register"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        link = "https://ingresso.ifrs.edu.br/"

        dispatcher.utter_message(
            text=f"Atrav√©s do link abaixo tu pode te matricular em um dos nossos cursos:")
        dispatcher.utter_message(
            url=link)

        return []


class InformToRedoRegister(Action):
    def name(self) -> Text:
        return "action_inform_redo_register"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        link_tutorial = "https://www.youtube.com/watch?v=STZYUidrVAg"
        link = "https://sia.ifrs.edu.br/aplicacoes/frame/index.php"

        dispatcher.utter_message(
            text=f"As rematr√≠culas dos cursos das modalidades **Superior** e **Subsequente** ocorrer√£o dos dias **25/07** √† **27/07** atrav√©s do link abaixo: ")
        dispatcher.utter_message(text=link)
        dispatcher.utter_message(
            text="Caso esteja com dificuldades consulte o link abaixo üëá")
        dispatcher.utter_message(text=link_tutorial)

        return []


class WhatBotDo(Action):
    def name(self) -> Text:
        return "action_what_bot_do"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        dispatcher.utter_message(
            text=f"Tu pode me solicitar:üëá\n‚û°Ô∏è Contato dos professores\n‚û°Ô∏è Calend√°rio acad√™mico\n‚û°Ô∏è Cursos dispon√≠veis\n‚û°Ô∏è Comprovante de matr√≠cula\n‚û°Ô∏è Informa√ß√µes sobre as aulas\n‚û°Ô∏è Documentos para matricula\n‚û°Ô∏è Como fazer a rematr√≠cula")

        return []


def clean_name(name):
    return "".join([c for c in name if c.isalpha()])


class NameFormValidate(FormValidationAction):
    def name(self) -> Text:
        return "validate_name_form"

    def validate_name(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:

        name = clean_name(slot_value).title()
        if len(name) == 0:
            dispatcher.utter_message(
                text="N√£o entendi, pode ter sido um erro de digita√ß√£o")
            return {"name": None}
        return {"name": name}


class ProfessorNameFormValidate(FormValidationAction):
    def name(self) -> Text:
        return "validate_professor_name_form"

    def validate_professor_name(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:

        name = clean_name(slot_value).title()
        if len(name) == 0:
            dispatcher.utter_message(
                text="N√£o entendi, pode ter sido um erro de digita√ß√£o")
            return {"professor_name": None}
        return {"professor_name": name}
